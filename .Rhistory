'<tr><td colspan="2">', txt['tp.outcome', lang], "</td><td>",
ifelse(dddd$Result == "no", txt["tp.refused",lang], paste0("<b>", txt["tp.accepted",lang], "</b>")),
'</td></tr>','</table>')
hc <- hchart(
dddd, "heatmap", hcaes(x = tbin, y = y, value = yes_pc, tp = tp)
) %>%
hc_colorAxis(
min = 0, max  = 100, stops = list_parse2(stops)
) %>%
hc_plotOptions(
heatmap = list(borderWidth = 3, borderColor = bg.colour, borderRadius = 2,
states = list(hover = list(color = "black")))
) %>%
hc_legend(enabled = F) %>%
hc_add_theme(hc_theme_swi) %>%
hc_chart(
animation =F, backgroundColor = bg.colour, height = chart.height,
spacing = list(5,12,9,9), borderRadius = 2,
borderColor = "white", borderWidth = 3
) %>%
hc_yAxis(
gridLineWidth = 0, lineColor = 'transparent', min = 1, tickInterval = 1,
max = max(count$nmax), minPadding = 0, maxPadding = 0.02,
labels = list (enabled = F), title = "", opposite = ifelse(lang == "AR", T, F)
) %>%
hc_xAxis(
label = list(autoRotation = list(0), padding = 1, step = 2),
categories = as.list(cat.label),
gridLineWidth = 0,  title = "", tickLength = 4,
min = 0, max = max.x, reversed = ifelse(lang == "AR", T, F)
)
hc2 <- hc %>%
hc_add_series(
dddd %>% filter(type == txt['title.initiative', lang]), "scatter",
hcaes(x = as.numeric(tbin)-1, y = y, group = as.factor(Result)),
marker = list(symbol = "diamond", radius = 3, lineWidth = 0) #, color = "#efe9e0"
) %>% hc_colors(colors = c("#ffffff", "#72302f"))
hc3 <- hc2 %>% hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em")
) %>%
hc_title(
floating = T, useHTML = T, text = txt[paste0(kw, ".key"), lang], x = 2, y = 19,
style = list("fontSize" = "1.05em", "color" = '#505c62')
)
if(!is.na(txt[paste0(kw, ".sub"), lang])) {
hc3 <- hc3 %>% hc_subtitle(
floating = T, useHTML = ifelse(lang == "AR", T, F), text = txt[paste0(kw, ".sub"), lang],
x = 2, y = 45, widthAdjust = ifelse(max(max.y$max.y) < 9, -2, -100 * (1-which.max(max.y$max.y) /  max.x)),
style = list("fontSize" = ifelse(lang == "AR", "0.95em", "1.1em"), "color" = "#1a1a1a")
)
}
hc3
}
if(exploreData) {
plots <- lapply(kw.sub, function(kw) singlePlot(ddd, kw))
source <- paste0(txt["source",lang], ": ", htmlLink("http://c2d.ch", txt["source.name",lang]), " | ", txt["code",lang], ": ",
htmlLink("http://jkunst.com/highcharter/", txt["code.name",lang]), " | ",
htmlLink("https://twitter.com/duc_qn", "@duc_qn"), " | swissinfo.ch")
shapes.path <- list.files(system.file("extdata", package="swiRcharts"), pattern = "shapes\\.css", full.names = T)
save_html(
tags$html(
tags$head(includeHTML(style_swi_highcharter()), includeCSS(shapes.path)),
tags$h2(HTML(txt['main.title', lang])),
div(class = "descr", HTML(txt['descr', lang])),
div(class = "graphic", hw_grid(plots, ncol = 3, rowheight = chart.height)),
div(id = "cite", HTML(source)),
# div(class = "footer", HTML(txt['footer', lang])),
HTML(iframeresizer)
), background = chart.area.bg,
file =  paste0("chVotes_byKeyword_exploration_", lang, ".html"), libdir = "js")
}
for(lang in colnames(txt)) {
cat("\n", lang)
plots <- lapply(keyw.sub, function(kw) singlePlot(ddd, kw, lang = lang))
source <- paste0(txt["source",lang], ": ", htmlLink("http://c2d.ch", txt["source.name",lang]), " | ", txt["code",lang], ": ",
htmlLink("http://jkunst.com/highcharter/", txt["code.name",lang]), " | ",
htmlLink("https://twitter.com/duc_qn", "@duc_qn"), " | swissinfo.ch")
shapes.path <- list.files(system.file("extdata", package="swiRcharts"), pattern = "shapes\\.css", full.names = T)
save_html(
tags$html(
tags$head(includeHTML(style_swi_highcharter()), includeCSS(shapes.path)),
tags$h2(HTML(txt['main.title', lang])),
div(class = "descr", HTML(paste0('<img src="https://interactive.swissinfo.ch/assets/Interactive_icon.svg.png" width="12" align="top">&nbsp; ', txt['descr', lang]))),
#tags$h3(HTML(txt['h3', lang])),
div(class = "graphic", hw_grid(plots, ncol = 3, rowheight = chart.height)),
div(id = "cite", HTML(source)),
# div(class = "footer", HTML(txt['footer', lang])),
HTML(iframeresizer)
), background = chart.area.bg,
file =  paste0("chVotes_byKeyword_prod_", lang, ".html"), libdir = "js")
}
str(kwf)
library(d3wordcloud)
kwf <- data %>% select(starts_with("keyword")) %>% unlist() %>% table() %>% sort(decreasing = T)
kwf <- kwf[-which(names(kwf) == "none")]
str(kwf)
kwf
kwf <- data %>% select(starts_with("keyword")) %>% unlist() %>% table() %>% sort(decreasing = T)
kwf <- kwf[-which(names(kwf) == "none" & kwf > 1)]
kwf
kwf <- data %>% select(starts_with("keyword")) %>% unlist() %>% table() %>% sort(decreasing = T)
kwf <- kwf[-which(names(kwf) == "none" & kwf <= 1)]
kwf
kwf <- data %>% select(starts_with("keyword")) %>% unlist() %>% table() %>% sort(decreasing = T)
kwf <- kwf[-which(names(kwf) == "none" | kwf <= 1)]
kwf
kwf
kwf
head(kwf)
kwf
kwf <- data %>% select(starts_with("keyword")) %>% unlist() %>% table() %>% sort(decreasing = T)
kwf <- kwf[-which(names(kwf) == "none" | kwf <= 7)]
kwf
htmltools::htmlEscape("https://www.pxweb.bfs.admin.ch/Selection.aspx?px_language=fr&px_db=px-x-0103010000_113&px_tableid=px-x-0103010000_113%5Cpx-x-0103010000_113.px&px_type=PX")
# Swiss population by age
# https://www.pxweb.bfs.admin.ch/Selection.aspx?px_language=fr&px_db=px-x-0103010000_113&px_tableid=px-x-0103010000_113%5Cpx-x-0103010000_113.px&px_type=PX
# https://www.pxweb.bfs.admin.ch/Selection.aspx?px_language=fr&px_db=px-x-0103010000_204&px_tableid=px-x-0103010000_204%5Cpx-x-0103010000_204.px&px_type=PX
data.file <- "data/STATPOP_2015_Tab_je_01_02_01_01_Nationalité.csv"
library(tidyverse)
library(scales)
library(magrittr)
library(countrycode)
library(swiMap)
library(swiTheme)
library(viridis)
data.read <- read_csv(data.file)
coln <- data.read$X1
datam <- data.read %>% select(-X1) %>% as.matrix()
rownames(datam) <- coln
# Ensure total is really the total...
stopifnot(colSums(datam[-c(1,3),]) == datam[1,])
# Ensure total "né à l'étranger"" is correct
stopifnot(colSums(datam[4:12,]) == datam[3,])
# Discard the total rows
datam <- datam[-c(1,3),-1]
data.all <- datam %>% as.tibble()
row.names(data.all) <- rownames(datam)
# Make data long
data <- tibble::rownames_to_column(data.all, "type")
data %<>% gather(country, value, -type)
typel <- c("Né en Suisse", "> 1 an", "1-4 ans", "5-9 ans", "10-14 ans",
"15-19 ans", "20-24 ans", "25-29 ans", "+30 ans", "Sans indication")
data %<>% mutate(type = case_when(
.$type == "Né en Suisse" ~ typel[1],
.$type == "Moins d'un an" ~ typel[2],
.$type == "1-4 ans" ~ typel[3],
.$type == "5-9 ans" ~ typel[4],
.$type == "10-14 ans" ~ typel[5],
.$type == "15-19 ans" ~ typel[6],
.$type == "20-24 ans" ~ typel[7],
.$type == "25-29 ans" ~ typel[8],
.$type == "30 ans ou plus" ~ typel[9],
.$type == "Sans indication"~ typel[10]
)) %>%
mutate(type = factor(type, levels = typel[c(2:9, 1, 10)], ordered = T))
nat.sub <- colSums(data.all) %>% sort(decreasing = T) %>% head(20)
dd <- data %>% filter(country %in% names(nat.sub)[-1]) %>%
group_by(country) %>% mutate(tot = sum(value)) %>%
ungroup() %>%
mutate(country = reorder(country, -tot)) %>%
group_by(country, type) %>%
mutate(pc = (value/tot)* 100) %>% ungroup()
dd %>%  ggplot(aes(x = type, y = value)) +
geom_bar(aes(fill = type), stat = "identity") +
facet_wrap(~country, scales = "free_y", ncol = 3) +
swi_theme() + scale_fill_viridis(discrete = T)
dd %>%  ggplot(aes(x = type, y = pc)) +
geom_bar(aes(fill = type), stat = "identity") +
facet_wrap(~country, ncol = 3) +
swi_theme() + scale_fill_viridis(discrete = T)
# Swiss population by age
# https://www.pxweb.bfs.admin.ch/Selection.aspx?px_language=fr&px_db=px-x-0103010000_113&px_tableid=px-x-0103010000_113%5Cpx-x-0103010000_113.px&px_type=PX
# https://www.pxweb.bfs.admin.ch/Selection.aspx?px_language=fr&px_db=px-x-0103010000_204&px_tableid=px-x-0103010000_204%5Cpx-x-0103010000_204.px&px_type=PX
data.file <- "data/STATPOP_2015_Tab_je_01_02_01_01_Nationalité.csv"
library(tidyverse)
library(scales)
library(magrittr)
library(countrycode)
library(swiMap)
library(swiTheme)
library(viridis)
data.read <- read_csv(data.file)
coln <- data.read$X1
datam <- data.read %>% select(-X1) %>% as.matrix()
rownames(datam) <- coln
# Ensure total is really the total...
stopifnot(colSums(datam[-c(1,3),]) == datam[1,])
# Ensure total "né à l'étranger"" is correct
stopifnot(colSums(datam[4:12,]) == datam[3,])
# Discard the total rows
datam <- datam[-c(1,3),-1]
data.all <- datam %>% as.tibble()
row.names(data.all) <- rownames(datam)
# Make data long
data <- tibble::rownames_to_column(data.all, "type")
data %<>% gather(country, value, -type)
typel <- c("Né en Suisse", "> 1 an", "1-4 ans", "5-9 ans", "10-14 ans",
"15-19 ans", "20-24 ans", "25-29 ans", "+30 ans", "Sans indication")
data %<>% mutate(type = case_when(
.$type == "Né en Suisse" ~ typel[1],
.$type == "Moins d'un an" ~ typel[2],
.$type == "1-4 ans" ~ typel[3],
.$type == "5-9 ans" ~ typel[4],
.$type == "10-14 ans" ~ typel[5],
.$type == "15-19 ans" ~ typel[6],
.$type == "20-24 ans" ~ typel[7],
.$type == "25-29 ans" ~ typel[8],
.$type == "30 ans ou plus" ~ typel[9],
.$type == "Sans indication"~ typel[10]
)) %>%
mutate(type = factor(type, levels = typel[c(2:9, 1, 10)], ordered = T))
nat.sub <- colSums(data.all) %>% sort(decreasing = T) %>% head(20)
dd <- data %>% filter(country %in% names(nat.sub)[-1]) %>%
group_by(country) %>% mutate(tot = sum(value)) %>%
ungroup() %>%
mutate(country = reorder(country, -tot)) %>%
group_by(country, type) %>%
mutate(pc = (value/tot)* 100) %>% ungroup()
dd %>%  ggplot(aes(x = type, y = value)) +
geom_bar(aes(fill = type), stat = "identity") +
facet_wrap(~country, scales = "free_y", ncol = 3) +
swi_theme() + scale_fill_viridis(discrete = T)
dd %>%  ggplot(aes(x = type, y = pc)) +
geom_bar(aes(fill = type), stat = "identity") +
facet_wrap(~country, ncol = 3) +
swi_theme() + scale_fill_viridis(discrete = T)
library(htmltools)
library(swiRcharts)
library(highcharter)
country.sub <- names(nat.sub)[-1] %>% head(16)
chart.height <- 300
bg.colour <-  "#f2f2f2"
y.max <- dd %>% filter(country %in% country.sub) %>% select(pc) %>% max()
typel
tmp.colors <- c((grDevices::colorRampPalette(c("#FDE725", "#440154")))(9), "lightgrey")
names(typel) <- c(tmp.colors[9], tmp.colors[1:8], tmp.colors[10])
lang <- 'EN'
dd %<>% mutate(color = names(typel)[match(as.character(type), typel)])
ddd <- dd %>% filter(country == "Allemagne", type != "Sans indication")
plotSingleColumnChart <- function(dd, country.sub) {
ddd <- dd %>% filter(country == country.sub, type != "Sans indication") %>% arrange(type)
#    ddd$tp <- paste0(
#     '<table class="table">',
#     '<tr><td  colspan="3"><b>', ddd$type, '</b></td>',
#     '<tr><td>', ddd$pc, "%",
#     ': <b>', round(dddd$yes_pc, 1), '%</b>', '</td><td></td>',
#     '<td>',
#     ifelse(round(dddd$Turnout, 1) == 0, "", paste0(txt["tp.turnout",lang], ": ", round(dddd$Turnout, 1), "%")),
#     '</td></tr>',
# 		'<tr><td colspan="2">', txt['tp.outcome', lang], "</td><td>",
# 		ifelse(dddd$Result == "no", txt["tp.refused",lang], paste0("<b>", txt["tp.accepted",lang], "</b>")),
# 		'</td></tr>','</table>')
#
hc <- hchart(
ddd, "column", hcaes(x = type, y = pc, value = value)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,12,7,3), borderRadius = 5,
borderColor = "white", borderWidth = 2
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent",
label = list(autoRotation = list(0), padding = 1, step = 2),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F),
labels = list(style = list(fontSize = "0.85em"), padding = 1)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%'),
gridLineWidth = 1, ceiling = y.max, tickAmount = 3,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F),
labels = list(style = list(fontSize = "0.75em"))
) %>%
hc_plotOptions(column = list(colorByPoint = T, colors = names(typel)[match(levels(dd$type), typel)],
borderRadius = 2, borderColor = bg.colour, borderWidth = 2,
pointPadding = 0.01, groupPadding = 0.01)
)
hc %>% hc_title(
floating = T, useHTML = T, text = unique(ddd$country), x = 7, y = 21,
style = list("fontSize" = "1.3em", "color" = '#505c62')
)
}
plotSingleColumnChart(dd, "Italie")
plots <- lapply(country.sub, function(nat) plotSingleColumnChart(dd, nat))
save_html(
tags$html(
tags$head(includeHTML(style_swi_highcharter())),
#tags$h2(HTML(txt['main.title', lang])),
#div(class = "descr", HTML(paste0('<img src="https://interactive.swissinfo.ch/assets/Interactive_icon.svg.png" width="12" align="top">&nbsp; ', txt['descr', lang]))),
#tags$h3(HTML(txt['h3', lang])),
div(class = "graphic", hw_grid(plots, ncol = 4, rowheight = chart.height)),
# div(id = "cite", HTML(source)),
# div(class = "footer", HTML(txt['footer', lang])),
HTML(iframeresizer)
), #background = chart.area.bg,
file =  paste0("residencyDuration_", lang, ".html"), libdir = "js")
htmltools::htmlEscape("https://www.pxweb.bfs.admin.ch/Selection.aspx?px_language=fr&px_db=px-x-0103010000_113&px_tableid=px-x-0103010000_113%5Cpx-x-0103010000_113.px&px_type=PX")
plotSingleColumnChart(dd, "Italie")
str(ddd)
str(ddd)
library(htmltools)
library(swiRcharts)
library(highcharter)
country.sub <- names(nat.sub)[-1] %>% head(16)
chart.height <- 300
bg.colour <-  "#f2f2f2"
y.max <- dd %>% filter(country %in% country.sub) %>% select(pc) %>% max()
typel
tmp.colors <- c((grDevices::colorRampPalette(c("#FDE725", "#440154")))(9), "lightgrey")
names(typel) <- c(tmp.colors[9], tmp.colors[1:8], tmp.colors[10])
lang <- 'EN'
dd %<>% mutate(color = names(typel)[match(as.character(type), typel)])
ddd <- dd %>% filter(country == "Allemagne", type != "Sans indication")
plotSingleColumnChart <- function(dd, country.sub) {
ddd <- dd %>% filter(country == country.sub, type != "Sans indication") %>% arrange(type)
ddd$tp <- paste0(
'<table class="table">',
'<tr><td colspan="3"><b>', ddd$type, '</b></td>',
'<tr><td colspan="2">', '<b>', round(dddd$pc, 1), '%</b>', '</td>',
'<td>', ddd$value, '</td></tr>',
'</table>')
hc <- hchart(
ddd, "column", hcaes(x = type, y = pc, value = value, tp = tp)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,12,7,3), borderRadius = 5,
borderColor = "white", borderWidth = 2
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent",
label = list(autoRotation = list(0), padding = 1, step = 2),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F),
labels = list(style = list(fontSize = "0.85em"), padding = 1)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%'),
gridLineWidth = 1, ceiling = y.max, tickAmount = 3,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F),
labels = list(style = list(fontSize = "0.75em"))
) %>%
hc_plotOptions(column = list(colorByPoint = T, colors = names(typel)[match(levels(dd$type), typel)],
borderRadius = 2, borderColor = bg.colour, borderWidth = 2,
pointPadding = 0.01, groupPadding = 0.01)
)
hc %>% hc_title(
floating = T, useHTML = T, text = unique(ddd$country), x = 7, y = 21,
style = list("fontSize" = "1.3em", "color" = '#505c62')
) %>% hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em")
)
}
plotSingleColumnChart(dd, "Italie")
library(htmltools)
library(swiRcharts)
library(highcharter)
country.sub <- names(nat.sub)[-1] %>% head(16)
chart.height <- 300
bg.colour <-  "#f2f2f2"
y.max <- dd %>% filter(country %in% country.sub) %>% select(pc) %>% max()
typel
tmp.colors <- c((grDevices::colorRampPalette(c("#FDE725", "#440154")))(9), "lightgrey")
names(typel) <- c(tmp.colors[9], tmp.colors[1:8], tmp.colors[10])
lang <- 'EN'
dd %<>% mutate(color = names(typel)[match(as.character(type), typel)])
ddd <- dd %>% filter(country == "Allemagne", type != "Sans indication")
plotSingleColumnChart <- function(dd, country.sub) {
ddd <- dd %>% filter(country == country.sub, type != "Sans indication") %>% arrange(type)
ddd$tp <- paste0(
'<table class="table">',
'<tr><td colspan="3"><b>', ddd$type, '</b></td>',
'<tr><td colspan="2">', '<b>', round(ddd$pc, 1), '%</b>', '</td>',
'<td>', ddd$value, '</td></tr>',
'</table>')
hc <- hchart(
ddd, "column", hcaes(x = type, y = pc, value = value, tp = tp)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,12,7,3), borderRadius = 5,
borderColor = "white", borderWidth = 2
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent",
label = list(autoRotation = list(0), padding = 1, step = 2),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F),
labels = list(style = list(fontSize = "0.85em"), padding = 1)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%'),
gridLineWidth = 1, ceiling = y.max, tickAmount = 3,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F),
labels = list(style = list(fontSize = "0.75em"))
) %>%
hc_plotOptions(column = list(colorByPoint = T, colors = names(typel)[match(levels(dd$type), typel)],
borderRadius = 2, borderColor = bg.colour, borderWidth = 2,
pointPadding = 0.01, groupPadding = 0.01)
)
hc %>% hc_title(
floating = T, useHTML = T, text = unique(ddd$country), x = 7, y = 21,
style = list("fontSize" = "1.3em", "color" = '#505c62')
) %>% hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em")
)
}
plotSingleColumnChart(dd, "Italie")
plots <- lapply(country.sub, function(nat) plotSingleColumnChart(dd, nat))
save_html(
tags$html(
tags$head(includeHTML(style_swi_highcharter())),
#tags$h2(HTML(txt['main.title', lang])),
#div(class = "descr", HTML(paste0('<img src="https://interactive.swissinfo.ch/assets/Interactive_icon.svg.png" width="12" align="top">&nbsp; ', txt['descr', lang]))),
#tags$h3(HTML(txt['h3', lang])),
div(class = "graphic", hw_grid(plots, ncol = 4, rowheight = chart.height)),
# div(id = "cite", HTML(source)),
# div(class = "footer", HTML(txt['footer', lang])),
HTML(iframeresizer)
), #background = chart.area.bg,
file =  paste0("residencyDuration_", lang, ".html"), libdir = "js")
ddd$country
as.character(ddd$country)
ddd
ddd$pc
dd$type
ddd
formatC(ddd$value)
formatC(ddd$value, big.mark = " ")
formatC(ddd$value, big.mark = "'")
library(htmltools)
library(swiRcharts)
library(highcharter)
country.sub <- names(nat.sub)[-1] %>% head(16)
chart.height <- 220
bg.colour <-  "#f2f2f2"
y.max <- dd %>% filter(country %in% country.sub) %>% select(pc) %>% max()
typel
tmp.colors <- c((grDevices::colorRampPalette(c("#FDE725", "#440154")))(9), "lightgrey")
names(typel) <- c(tmp.colors[9], tmp.colors[1:8], tmp.colors[10])
lang <- 'EN'
dd %<>% mutate(color = names(typel)[match(as.character(type), typel)])
ddd <- dd %>% filter(country == "Allemagne", type != "Sans indication")
plotSingleColumnChart <- function(dd, country.sub) {
ddd <- dd %>% filter(country == country.sub, type != "Sans indication") %>% arrange(type)
ddd$tp <- paste0(
'<table class="table">',
#'<tr><td colspan="2">', as.character(ddd$country), '</td><td></td></tr>',
'<tr><td colspan="2"><b>', round(ddd$pc, 1), '%</b> ',
ifelse(ddd$type == "né en Suisse", " ", "résident en Suisse "), ddd$type, '</td>',
'<tr><td colspan="2">(<b>', round(ddd$value / 1000, 1), "</b>/", round(ddd$tot / 1000, 1), " mille",
')</td><td></td></tr>',
'</table>')
hc <- hchart(
ddd, "column", hcaes(x = type, y = pc, value = value, tp = tp)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,12,7,3), borderRadius = 4,
borderColor = "white", borderWidth = 1
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent", tickLength = 7,
label = list(autoRotation = list(0), padding = 1, step = 2),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F),
labels = list(style = list(fontSize = "0.85em"), padding = 1)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%'),
gridLineWidth = 1, ceiling = y.max, tickAmount = 3,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F),
labels = list(style = list(fontSize = "0.75em"))
) %>%
hc_plotOptions(column = list(colorByPoint = T, colors = names(typel)[match(levels(dd$type), typel)],
borderRadius = 2, borderColor = bg.colour, borderWidth = 2,
pointPadding = 0.01, groupPadding = 0.01)
)
hc %>% hc_title(
floating = T, useHTML = T, text = unique(ddd$country), x = 7, y = 21,
style = list("fontSize" = "1.15em", "color" = '#505c62')
) %>% hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em")
)
}
plotSingleColumnChart(dd, "Italie")
plots <- lapply(country.sub, function(nat) plotSingleColumnChart(dd, nat))
save_html(
tags$html(
tags$head(includeHTML(style_swi_highcharter())),
#tags$h2(HTML(txt['main.title', lang])),
#div(class = "descr", HTML(paste0('<img src="https://interactive.swissinfo.ch/assets/Interactive_icon.svg.png" width="12" align="top">&nbsp; ', txt['descr', lang]))),
#tags$h3(HTML(txt['h3', lang])),
div(class = "graphic", hw_grid(plots, ncol = 3, rowheight = chart.height)),
# div(id = "cite", HTML(source)),
# div(class = "footer", HTML(txt['footer', lang])),
HTML(iframeresizer)
), #background = chart.area.bg,
file =  paste0("residencyDuration_", lang, ".html"), libdir = "js")
